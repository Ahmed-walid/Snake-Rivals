
.MODEL HUGE
.STACK 128
.DATA

	SQUARE_SIZE            DW  31



	; DATA ABOUT FIRST SNAKE
	ask_name               DB  "Please Enter First player Name:",10,13,'$'
	name_s                 DB  15,?,15 dup('$')
	ask_name2              DB  "Please Enter second player Name:",10,13,'$'
	name_s2                DB  15,?,15 dup('$')
	new_line               db  10,13
	pressenterkey          db  "Press Enter Key To Continue",10,13,'$'
	message                db  "*To start Chatting Press F1",10,13,10,13, '*To Start Snake Trivals Press F2',10,13,10,13,'*To End the Program press ESC',10,13,10,13,'$'
	chat                   db  'now you start chatting$'







	; DATA ABOUT FIRST SNAKE
	SNAKE1_COLOR           EQU 2                                                                                                                                                                                  	;GREEN
	SNAKE1_X               DW  100 DUP(110)                                                                                                                                                                       	; INTITALLY
	SNAKE1_Y               DW  100 DUP(110)                                                                                                                                                                       	; INTITALLY

	SNAKE1_HEADSHAPE_UP    DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 106, 18, 215, 145, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 119, 119, 119, 119, 119, 119, 119
	                       DB  119, 119, 238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 119, 119, 119, 2, 2, 2, 2, 2, 119, 119, 119, 119, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 215, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2
	                       DB  2, 2, 2, 119, 119, 2, 2, 2, 2, 119, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 119, 2, 2, 2, 119, 119, 2, 2, 2, 2, 119, 216, 190, 119, 2, 2
	                       DB  118, 4, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 2, 2, 119, 216, 216, 2, 2, 2, 2, 119, 216, 17, 119, 119, 2, 117, 40, 115, 119, 0, 0, 0, 0, 0
	                       DB  0, 0, 178, 119, 119, 119, 119, 119, 119, 191, 18, 119, 2, 2, 2, 2, 2, 119, 119, 119, 119, 119, 114, 40, 115, 119, 119, 0, 0, 0, 0, 0, 0, 119, 119, 2, 119, 119, 119, 119
	                       DB  119, 119, 119, 2, 2, 2, 2, 2, 2, 2, 119, 117, 6, 40, 40, 115, 2, 119, 215, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                       DB  2, 119, 115, 6, 40, 40, 115, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 115, 40, 118, 2, 119
	                       DB  119, 0, 0, 0, 0, 119, 2, 2, 2, 2, 2, 2, 2, 119, 119, 119, 2, 2, 2, 2, 118, 144, 119, 119, 2, 2, 115, 114, 119, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2
	                       DB  2, 2, 119, 143, 25, 26, 165, 119, 2, 2, 143, 28, 29, 27, 24, 144, 119, 118, 118, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 2, 119, 166, 24, 21, 23, 29, 24, 119
	                       DB  119, 26, 29, 23, 21, 26, 29, 23, 119, 2, 2, 2, 119, 214, 0, 0, 0, 0, 0, 119, 119, 119, 118, 25, 27, 18, 17, 16, 23, 29, 144, 144, 29, 23, 16, 16, 18, 28, 29, 118
	                       DB  119, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 216, 119, 144, 30, 25, 17, 19, 17, 20, 28, 144, 143, 28, 20, 17, 224, 17, 26, 29, 144, 119, 215, 240, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 216, 119, 144, 29, 26, 18, 17, 17, 21, 29, 144, 144, 29, 21, 18, 17, 18, 27, 29, 118, 119, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 119, 119, 28, 30, 22, 25
	                       DB  23, 26, 28, 119, 118, 29, 26, 23, 25, 23, 30, 28, 119, 119, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 119, 119, 24, 31, 30, 29, 29, 31, 25, 119, 119, 26, 31, 29, 29
	                       DB  30, 31, 24, 119, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 144, 28, 31, 31, 31, 30, 143, 119, 119, 168, 30, 31, 31, 31, 28, 144, 119, 119, 107, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 143, 28, 30, 29, 23, 119, 119, 119, 119, 23, 29, 30, 28, 143, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119
	                       DB  119, 119, 215, 143, 238, 191, 119, 2, 2, 119, 191, 238, 143, 216, 119, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 119, 2, 119, 119, 119, 119, 119, 2, 2, 2
	                       DB  2, 119, 119, 119, 119, 119, 2, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 119, 119, 119, 2, 2, 2, 2, 2, 2, 119, 119, 2, 2, 119, 119, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 239, 119, 119, 2, 2, 2, 119, 119, 119, 119, 119, 2, 119, 119, 119, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 119, 119, 119
	                       DB  119, 119, 215, 215, 119, 119, 119, 119, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 240, 202, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0
						
	SNAKE1_HEADSHAPE_RIGHT DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119
	                       DB  119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 2, 119, 119, 119, 178, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 215, 216, 216, 119, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 202, 119, 119, 119, 119, 119, 119, 119, 119, 2, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 119, 119, 119, 119, 119, 119, 119, 144, 144
	                       DB  118, 2, 2, 2, 2, 2, 119, 119, 119, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 239, 119, 119, 2, 119, 119, 144, 24, 28, 29, 30, 25, 119, 2, 2, 2, 2, 119, 119, 119
	                       DB  119, 119, 215, 0, 0, 0, 0, 0, 0, 0, 202, 119, 119, 2, 119, 119, 143, 28, 31, 30, 26, 25, 27, 166, 119, 2, 2, 2, 119, 119, 2, 2, 119, 119, 119, 0, 0, 0, 0, 0
	                       DB  0, 119, 119, 2, 119, 119, 215, 28, 31, 30, 22, 18, 17, 18, 24, 143, 2, 2, 119, 119, 119, 2, 2, 2, 2, 119, 216, 0, 0, 0, 0, 19, 119, 2, 2, 119, 119, 143, 30, 31
	                       DB  29, 25, 17, 19, 17, 21, 25, 119, 2, 2, 119, 191, 119, 2, 2, 2, 119, 119, 236, 0, 0, 0, 240, 119, 2, 2, 119, 119, 238, 29, 31, 29, 23, 17, 17, 16, 23, 26, 119, 2
	                       DB  2, 119, 18, 216, 119, 2, 2, 2, 119, 119, 0, 0, 0, 202, 119, 2, 2, 2, 119, 191, 23, 30, 31, 26, 21, 20, 23, 29, 165, 119, 2, 2, 119, 119, 216, 119, 2, 2, 2, 119
	                       DB  119, 0, 0, 0, 0, 119, 119, 2, 2, 2, 119, 119, 143, 25, 28, 29, 28, 29, 24, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 106, 0, 0, 0, 215, 119, 2, 2
	                       DB  2, 2, 119, 119, 119, 119, 144, 144, 144, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 18, 0, 0, 0, 215, 119, 2, 2, 2, 2, 119, 119, 119, 118, 144, 143, 144
	                       DB  119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 215, 0, 0, 0, 119, 119, 2, 2, 2, 119, 119, 168, 26, 29, 29, 28, 29, 26, 143, 2, 2, 2, 2, 2, 2, 2
	                       DB  2, 2, 2, 2, 119, 145, 0, 0, 0, 119, 119, 2, 2, 119, 191, 23, 30, 31, 26, 21, 20, 23, 29, 28, 118, 2, 2, 2, 2, 119, 119, 119, 2, 2, 2, 119, 23, 0, 0, 0
	                       DB  119, 2, 2, 119, 119, 238, 29, 31, 29, 23, 18, 17, 16, 23, 29, 144, 2, 2, 2, 119, 216, 216, 119, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 119, 119, 143, 30, 31, 29
	                       DB  25, 17, 224, 16, 21, 27, 119, 2, 2, 2, 119, 17, 190, 2, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 119, 216, 28, 31, 30, 23, 18, 17, 18, 26, 24, 119, 2, 119
	                       DB  119, 119, 119, 119, 2, 2, 119, 119, 238, 0, 0, 0, 0, 240, 119, 119, 2, 119, 119, 143, 28, 31, 30, 27, 26, 28, 29, 144, 2, 2, 115, 117, 119, 119, 2, 2, 2, 119, 119, 0
	                       DB  0, 0, 0, 0, 0, 215, 119, 119, 2, 119, 119, 144, 24, 28, 29, 29, 29, 23, 119, 2, 119, 6, 6, 119, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 119
	                       DB  119, 119, 119, 119, 119, 118, 144, 118, 119, 118, 115, 115, 40, 40, 114, 117, 118, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 119, 119, 119, 119, 119, 119, 119, 2
	                       DB  118, 114, 40, 40, 40, 40, 40, 4, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 240, 215, 118, 215, 119, 2, 2, 119, 118, 115, 115, 115, 115, 111, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 2, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 119, 119, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 214, 119, 119, 119, 119, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0

	SNAKE1_HEADSHAPE_LEFT  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 119, 119, 119, 119, 214, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 119, 119, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 2, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 111, 115, 115, 115, 115, 118, 119, 2, 2, 119, 215, 118, 215, 240, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 4, 40, 40, 40, 40, 40, 114
	                       DB  118, 2, 119, 119, 119, 119, 119, 119, 119, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 118, 117, 114, 40, 40, 115, 115, 118, 119, 118, 144, 118, 119, 119, 119, 119
	                       DB  119, 119, 119, 240, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 119, 6, 6, 119, 2, 119, 23, 29, 29, 29, 28, 24, 144, 119, 119, 2, 119, 119, 215, 0, 0, 0, 0
	                       DB  0, 0, 119, 119, 2, 2, 2, 119, 119, 117, 115, 2, 2, 144, 29, 28, 26, 27, 30, 31, 28, 143, 119, 119, 2, 119, 119, 240, 0, 0, 0, 0, 238, 119, 119, 2, 2, 119, 119, 119
	                       DB  119, 119, 2, 119, 24, 26, 18, 17, 18, 23, 30, 31, 28, 216, 119, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 2, 190, 17, 119, 2, 2, 2, 119, 27, 21, 16, 224, 17
	                       DB  25, 29, 31, 30, 143, 119, 119, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 119, 216, 216, 119, 2, 2, 2, 144, 29, 23, 16, 17, 18, 23, 29, 31, 29, 238, 119, 119, 2, 2
	                       DB  119, 0, 0, 0, 23, 119, 2, 2, 2, 119, 119, 119, 2, 2, 2, 2, 118, 28, 29, 23, 20, 21, 26, 31, 30, 23, 191, 119, 2, 2, 119, 119, 0, 0, 0, 145, 119, 2, 2, 2
	                       DB  2, 2, 2, 2, 2, 2, 2, 2, 143, 26, 29, 28, 29, 29, 26, 168, 119, 119, 2, 2, 2, 119, 119, 0, 0, 0, 215, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
	                       DB  119, 144, 143, 144, 118, 119, 119, 119, 2, 2, 2, 2, 119, 215, 0, 0, 0, 18, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 144, 144, 144, 119, 119, 119, 119, 2
	                       DB  2, 2, 2, 119, 215, 0, 0, 0, 106, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 24, 29, 28, 29, 28, 25, 143, 119, 119, 2, 2, 2, 119, 119, 0, 0, 0, 0
	                       DB  119, 119, 2, 2, 2, 119, 216, 119, 119, 2, 2, 119, 165, 29, 23, 20, 21, 26, 31, 30, 23, 191, 119, 2, 2, 2, 119, 202, 0, 0, 0, 119, 119, 2, 2, 2, 119, 216, 18, 119
	                       DB  2, 2, 119, 26, 23, 16, 17, 17, 23, 29, 31, 29, 238, 119, 119, 2, 2, 119, 240, 0, 0, 0, 236, 119, 119, 2, 2, 2, 119, 191, 119, 2, 2, 119, 25, 21, 17, 19, 17, 25
	                       DB  29, 31, 30, 143, 119, 119, 2, 2, 119, 19, 0, 0, 0, 0, 216, 119, 2, 2, 2, 2, 119, 119, 119, 2, 2, 143, 24, 18, 17, 18, 22, 30, 31, 28, 215, 119, 119, 2, 119, 119
	                       DB  0, 0, 0, 0, 0, 0, 119, 119, 119, 2, 2, 119, 119, 2, 2, 2, 119, 166, 27, 25, 26, 30, 31, 28, 143, 119, 119, 2, 119, 119, 202, 0, 0, 0, 0, 0, 0, 0, 215, 119
	                       DB  119, 119, 119, 119, 2, 2, 2, 2, 119, 25, 30, 29, 28, 24, 144, 119, 119, 2, 119, 119, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 119, 119, 119, 2, 2, 2, 2, 2
	                       DB  118, 144, 144, 119, 119, 119, 119, 119, 119, 119, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 2, 119, 119, 119, 119, 119, 119, 119, 119, 202
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 119, 216, 216, 215, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 178, 119, 119, 119, 2, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119
	                       DB  119, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0

	SNAKE1_HEADSHAPE_DOWN  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 240, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 119, 119, 119, 119, 215, 215, 119
	                       DB  119, 119, 119, 119, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 119, 119, 119, 2, 119, 119, 119, 119, 119, 2, 2, 2, 119, 119, 239, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 119, 119, 2, 2, 119, 119, 2, 2, 2, 2, 2, 2, 119, 119, 119, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 2, 119, 119, 119, 119, 119
	                       DB  2, 2, 2, 2, 119, 119, 119, 119, 119, 2, 119, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 119, 216, 143, 238, 191, 119, 2, 2, 119, 191, 238, 143, 215, 119
	                       DB  119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 143, 28, 30, 29, 23, 119, 119, 119, 119, 23, 29, 30, 28, 143, 119, 119, 119, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 107, 119, 119, 144, 28, 31, 31, 31, 30, 168, 119, 119, 143, 30, 31, 31, 31, 28, 144, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 119, 119, 24, 31
	                       DB  30, 29, 29, 31, 26, 119, 119, 25, 31, 29, 29, 30, 31, 24, 119, 119, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215, 119, 119, 28, 30, 23, 25, 23, 26, 29, 118, 119, 28, 26
	                       DB  23, 25, 22, 30, 28, 119, 119, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 119, 118, 29, 27, 18, 17, 18, 21, 29, 144, 144, 29, 21, 17, 17, 18, 26, 29, 144, 119, 216, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 240, 215, 119, 144, 29, 26, 17, 224, 17, 20, 28, 143, 144, 28, 20, 17, 19, 17, 25, 30, 144, 119, 216, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119
	                       DB  119, 118, 29, 28, 18, 16, 16, 23, 29, 144, 144, 29, 23, 16, 17, 18, 27, 25, 118, 119, 119, 119, 0, 0, 0, 0, 0, 214, 119, 2, 2, 2, 119, 23, 29, 26, 21, 23, 29, 26
	                       DB  119, 119, 24, 29, 23, 21, 24, 166, 119, 2, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 2, 118, 118, 119, 144, 24, 27, 29, 28, 143, 2, 2, 119, 165, 26, 25, 143, 119, 2
	                       DB  2, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 119, 114, 115, 2, 2, 119, 119, 144, 118, 2, 2, 2, 2, 119, 119, 119, 2, 2, 2, 2, 2, 2, 2, 119, 0, 0, 0, 0
	                       DB  119, 119, 2, 118, 40, 115, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 119, 119, 2, 115, 40, 40, 6, 115, 119
	                       DB  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 215, 119, 2, 115, 40, 40, 6, 117, 119, 2, 2, 2, 2, 2, 2, 2, 119, 119
	                       DB  119, 119, 119, 119, 119, 2, 119, 119, 0, 0, 0, 0, 0, 0, 119, 119, 115, 40, 114, 119, 119, 119, 119, 119, 2, 2, 2, 2, 2, 119, 18, 191, 119, 119, 119, 119, 119, 119, 178, 0
	                       DB  0, 0, 0, 0, 0, 0, 119, 115, 40, 117, 2, 119, 119, 17, 216, 119, 2, 2, 2, 2, 216, 216, 119, 2, 2, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 4
	                       DB  118, 2, 2, 119, 190, 216, 119, 2, 2, 2, 2, 119, 119, 2, 2, 2, 119, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 119, 2, 2, 2, 2, 119, 119, 2, 2
	                       DB  2, 2, 2, 2, 2, 2, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 215, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119, 119, 2, 2, 2, 2, 2, 2, 2, 2, 2, 119, 119, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 119, 119, 119, 119, 2, 2, 2, 2, 2, 119, 119, 119, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 238, 119
	                       DB  119, 119, 119, 119, 119, 119, 119, 119, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 145, 215, 18, 106, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0
	; INTITALLY
	

	; DATA ABOUT SECOND SNAKE
	
	SNAKE2_COLOR           EQU 6                                                                                                                                                                                  	; BROWN
	SNAKE2_X               DW  15 DUP(220)                                                                                                                                                                        	; INTITALLY
	SNAKE2_Y               DW  15 DUP(220)
	
	
	
	                    
	SNAKE2_HEADSHAPE_UP    DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 0, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 118, 118, 117, 117, 118, 118, 118, 117, 117, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 6, 6, 117, 118, 117, 6
	                       DB  6, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 6, 41, 6, 116, 6, 41, 6, 118, 118, 118, 118, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 164, 118, 115, 6, 6, 6, 6, 6, 115, 118, 164, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 118, 118, 25, 29, 10, 140, 140, 10, 10, 10, 140, 140, 10, 29, 25, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 142, 71, 72, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 72, 71, 142, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0
	                       DB  0, 0, 118, 118, 118, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 118, 118, 118, 0, 0, 0, 0, 0, 0, 118, 118, 141, 10, 10, 10, 10
	                       DB  10, 140, 142, 141, 10, 10, 10, 141, 142, 140, 10, 10, 10, 10, 10, 141, 118, 118, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 141, 142, 141, 10, 10, 10, 141, 142
	                       DB  141, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118
	                       DB  118, 0, 0, 0, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 0, 0, 118, 118, 142, 10, 10
	                       DB  10, 141, 142, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 142, 10, 10, 141, 143, 19, 19, 237, 141, 10, 10, 10
	                       DB  10, 10, 10, 10, 141, 237, 19, 19, 143, 141, 10, 10, 142, 118, 118, 0, 0, 118, 118, 141, 10, 10, 141, 237, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 237
	                       DB  141, 10, 10, 141, 118, 118, 0, 0, 118, 118, 141, 10, 10, 141, 143, 19, 19, 236, 141, 10, 10, 10, 10, 10, 10, 10, 141, 236, 19, 19, 143, 141, 10, 10, 141, 118, 118, 0, 0, 118
	                       DB  118, 142, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118
	                       DB  0, 0, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 0, 0, 118, 118, 118, 141, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 0, 0, 0, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 0, 0, 0, 0, 119, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142
	                       DB  118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 118, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 142, 141
	                       DB  141, 10, 10, 10, 10, 10, 141, 141, 142, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 143, 142, 142, 142, 143, 143, 118, 118
	                       DB  118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0


	SNAKE2_HEADSHAPE_RIGHT DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118
	                       DB  118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 118, 118, 118, 118, 143, 142, 142, 141, 141, 142, 142, 143, 118, 118, 118, 118, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 141, 141, 143, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118
	                       DB  118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 141
	                       DB  141, 141, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 141, 143, 237, 143, 141, 10, 10, 10, 10, 10, 10
	                       DB  143, 118, 118, 118, 0, 0, 0, 0, 0, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 118
	                       DB  118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 71, 25, 143, 118, 118, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 141, 236, 19, 237, 141, 10, 10, 10, 10, 10, 10, 10, 72, 29, 164, 118, 118, 118, 0, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 141, 10, 10, 10
	                       DB  141, 140, 10, 10, 10, 10, 10, 118, 118, 118, 118, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 142, 10, 10, 10, 10, 140, 115, 6
	                       DB  6, 117, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 141, 10, 10, 10, 10, 140, 6, 41, 6, 117, 118, 118, 142, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 117, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 116, 118, 118, 0, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 6, 6, 117, 118, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 141, 10, 10, 10, 10, 140, 6, 41, 6, 117, 118, 118, 143
	                       DB  141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 142, 10, 10, 10, 10, 140, 115, 6, 6, 117, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 141, 142, 141, 10, 10, 10, 141, 140, 10, 10, 10, 10, 10, 118, 118, 118, 118, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 236, 19, 237, 141, 10, 10, 10
	                       DB  10, 10, 10, 10, 72, 29, 164, 118, 118, 118, 0, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 71, 25, 143, 118, 118
	                       DB  0, 0, 0, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 0, 118, 118, 118, 142, 10, 10
	                       DB  10, 10, 10, 10, 10, 141, 143, 237, 143, 141, 10, 10, 10, 10, 10, 10, 143, 118, 118, 118, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 141, 141, 141
	                       DB  10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 141, 141, 143, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 118, 118, 118, 118, 118, 143, 142, 142, 141, 141, 142, 142, 143, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118
	                       DB  118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0



	SNAKE2_HEADSHAPE_LEFT  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118
	                       DB  118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 143, 142, 142, 141, 141, 142, 142, 143, 118, 118, 118, 118, 118, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 143, 141, 141, 10, 10, 10, 10, 10, 10, 10, 141, 142, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10
	                       DB  10, 141, 141, 141, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 118, 118, 118, 143, 10, 10, 10, 10, 10, 10, 141, 143, 237, 143, 141, 10, 10, 10, 10
	                       DB  10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 0, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 0, 0
	                       DB  0, 118, 118, 143, 25, 71, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 0, 118, 118, 118, 164, 29, 72, 10, 10, 10
	                       DB  10, 10, 10, 10, 141, 237, 19, 236, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 118, 118, 118, 118, 10, 10, 10, 10, 10, 140, 141, 10, 10, 10, 141, 142, 141, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 117, 6, 6, 115, 140, 10, 10, 10, 10, 142, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  141, 143, 118, 118, 117, 6, 41, 6, 140, 10, 10, 10, 10, 141, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 118, 117, 6, 6, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 0, 118, 118, 116, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 117, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 142, 118, 118, 117, 6, 41, 6, 140, 10, 10, 10, 10, 141, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 117
	                       DB  6, 6, 115, 140, 10, 10, 10, 10, 142, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 118, 118, 118, 118, 118, 10, 10, 10, 10, 10, 140
	                       DB  141, 10, 10, 10, 141, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 0, 118, 118, 118, 164, 29, 72, 10, 10, 10, 10, 10, 10, 10, 141, 237, 19, 236, 141, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 143, 25, 71, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118
	                       DB  118, 118, 0, 0, 0, 118, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 0, 0, 0, 0, 0, 118, 118, 118
	                       DB  143, 10, 10, 10, 10, 10, 10, 141, 143, 237, 143, 141, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 141
	                       DB  141, 141, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142
	                       DB  118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 143, 141, 141, 10, 10, 10, 10, 10, 10, 10, 141, 142, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 143, 142, 142, 141, 141, 142, 142, 143, 118, 118, 118, 118, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118
	                       DB  118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0


	SNAKE2_HEADSHAPE_DOWN  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118
	                       DB  118, 118, 118, 143, 143, 142, 142, 142, 143, 118, 118, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 142, 141, 141, 10, 10, 10, 10, 10
	                       DB  141, 141, 142, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 118, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 118, 118
	                       DB  118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 119, 0, 0, 0, 0, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 0, 0, 0, 118, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 141, 118, 118, 118, 0, 0, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 0
	                       DB  0, 118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 118, 118, 142, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 10, 10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 142, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 142
	                       DB  118, 118, 0, 0, 118, 118, 141, 10, 10, 141, 143, 19, 19, 236, 141, 10, 10, 10, 10, 10, 10, 10, 141, 236, 19, 19, 143, 141, 10, 10, 141, 118, 118, 0, 0, 118, 118, 141, 10, 10
	                       DB  141, 237, 19, 19, 19, 142, 10, 10, 10, 10, 10, 10, 10, 142, 19, 19, 19, 237, 141, 10, 10, 141, 118, 118, 0, 0, 118, 118, 142, 10, 10, 141, 143, 19, 19, 237, 141, 10, 10, 10
	                       DB  10, 10, 10, 10, 141, 237, 19, 19, 143, 141, 10, 10, 142, 118, 118, 0, 0, 118, 118, 142, 10, 10, 10, 141, 142, 142, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 142, 142, 141
	                       DB  10, 10, 10, 142, 118, 118, 0, 0, 118, 118, 143, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 143, 118, 118, 0, 0, 0
	                       DB  118, 118, 141, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 141, 118, 118, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10
	                       DB  141, 142, 141, 10, 10, 10, 141, 142, 141, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0, 118, 118, 141, 10, 10, 10, 10, 10, 140, 142, 141, 10, 10, 10, 141, 142, 140
	                       DB  10, 10, 10, 10, 10, 141, 118, 118, 0, 0, 0, 0, 0, 0, 118, 118, 118, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 118, 118, 118, 0
	                       DB  0, 0, 0, 0, 0, 0, 118, 118, 143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118
	                       DB  143, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 142, 71, 72, 10, 10, 10, 10, 10
	                       DB  10, 10, 10, 10, 72, 71, 142, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 25, 29, 10, 140, 140, 10, 10, 10, 140, 140, 10, 29, 25, 118, 118, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 143, 164, 118, 115, 6, 6, 6, 6, 6, 115, 118, 164, 143, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 118, 118, 118, 118, 6, 41, 6, 116, 6, 41, 6, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118
	                       DB  6, 6, 117, 118, 117, 6, 6, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 117, 117, 118, 118, 118, 117, 117, 118, 118
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 118, 118, 118, 0, 118, 118, 118, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0

	APPLE                  DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 244, 0, 104, 46, 46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 137, 137, 136, 140, 46
	                       DB  46, 46, 46, 46, 46, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 137, 137, 136, 46, 46, 46, 46, 46, 46, 46, 116, 178, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 137, 136, 46, 46, 46, 46, 46, 46, 46, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 20, 20, 0, 0, 0, 137, 136, 46, 46, 46, 46, 46, 46, 140, 227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 136, 136, 136, 136, 0, 0
	                       DB  136, 137, 46, 46, 46, 46, 6, 136, 136, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 0, 41, 39, 41, 41, 41, 41, 39, 39, 136, 138, 116, 41, 41, 39, 39, 39, 41
	                       DB  39, 41, 0, 244, 0, 0, 0, 0, 0, 0, 0, 20, 136, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 6, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 136, 20, 0, 0, 0, 0
	                       DB  0, 244, 136, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 136, 244, 0, 0, 0, 0, 124, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 41, 39, 39, 39, 39, 124, 0, 0, 0, 196, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 12, 64, 64, 12, 39, 39, 39, 41, 196, 0, 0, 0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 64, 65, 65, 64, 41, 39, 39
	                       DB  39, 0, 0, 0, 124, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 12, 65, 65, 64, 12, 39, 39, 39, 124, 0, 0, 0, 41, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 12, 64, 65, 64, 41, 39, 39, 41, 0, 0, 244, 136, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 41, 12, 12, 12, 39, 39, 39, 41, 136, 244, 244, 136, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 41, 136, 244, 0, 0, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 0, 0, 0, 124
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 124, 0, 0, 0, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 0, 0, 0, 3, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 41, 3, 0, 0, 196, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41
	                       DB  196, 0, 0, 0, 123, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 123, 0, 0, 0, 0, 124, 41, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 124, 0, 0, 0, 0, 244, 136, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 136, 244, 0, 0, 0, 0, 0, 123, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 123, 0, 0, 0, 0, 0, 0, 0, 123, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 123, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 244, 136, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 136, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 41, 39, 39, 39, 39, 39
	                       DB  39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 41, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39
	                       DB  39, 39, 41, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 136, 39, 39, 39, 39, 39, 41, 39, 41, 39, 39, 39, 39, 39, 136, 20, 0, 0, 0, 0, 0, 0
	                       DB  0

	APPLE_X                DW  236,103,	353,211,53,	442,546,490,501,257,404,68,	417,169,252,329,292,197,43,	344,481,514,313,554,484,261,524,312,544,260
	APPLE_Y                DW  332,254,103,256,189,212,133,175,81,256,117,352,287,240,339,308,290,313,353,281,89,312,114,122,288,324,124,127,198,114
	APPLES_NUM             DW  30                                                                                                                                                                                 	; 30 POSSIBLE LOCATIONS FOR APPLES
	CURR_APPLE_INDEX       DW  0                                                                                                                                                                                  	; THAT REPRESENT WHICH APPLE IS DISPLAYED CURRENLTY
	CRITICAL_DIST          DW  32                                                                                                                                                                                 	; SNAKE EATS AN APPLE IF THE DISTANCE BETWEEN SNAKE_HEAD_CENTER AND APPLE_CENTER IS 22




	SNAKE_LEN_ARR          DW  2,2
	MAX_TOTAL_LEN          DW  9
	MIN_TOTAL_LEN          DW  2
	CHOSEN_SNAKE           DW  ?
	;DATA ABOUT SNAKE SHAPE

	BODY_SHAPE2            DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0
	                       DB  0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0
	                       DB  0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0
	                       DB  0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 112 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

	BODY_SHAPE1            DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0
	                       DB  0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0
	                       DB  0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0
	                       DB  0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0
	                       DB  0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0

	FIRE                   DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 67, 43, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 43, 43, 14, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 43, 43, 43, 14, 91, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 43, 43, 43, 43, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 67, 43, 43, 43, 43, 43, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66
	                       DB  43, 43, 43, 43, 43, 43, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 43, 43, 43, 43, 43, 43, 43, 43, 90, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 90, 0, 0, 66, 42, 42, 42, 43, 43, 43, 42, 42, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 66, 66, 0, 67, 42, 42, 42, 42, 43, 43, 43, 42, 42, 42, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43
	                       DB  90, 42, 42, 42, 42, 42, 42, 43, 43, 43, 42, 42, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 43, 43, 42, 42, 42, 42, 42, 42, 42, 43, 43
	                       DB  43, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 42, 42, 42, 90, 0, 0, 0, 0
	                       DB  0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 43, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 42, 42, 42, 89, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91
	                       DB  43, 43, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 42, 42, 42, 66, 42, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42
	                       DB  43, 43, 43, 43, 42, 42, 42, 42, 65, 42, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 43, 43, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42
	                       DB  42, 42, 90, 0, 0, 0, 0, 0, 0, 0, 0, 67, 43, 43, 41, 41, 41, 41, 41, 42, 43, 43, 43, 43, 42, 42, 41, 41, 41, 41, 41, 41, 41, 89, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 14, 43, 42, 41, 41, 41, 41, 42, 42, 43, 43, 43, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 66, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 42, 41, 41, 41, 41
	                       DB  42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 89, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 42, 41, 41, 41, 41, 42, 42, 42, 42, 42, 41, 41, 42, 41
	                       DB  41, 41, 41, 41, 41, 41, 89, 90, 0, 0, 0, 0, 0, 0, 0, 14, 43, 42, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 41, 41, 42, 41, 41, 41, 41, 41, 12, 88, 66, 0
	                       DB  0, 0, 0, 0, 0, 0, 67, 43, 43, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 41, 42, 42, 42, 41, 41, 41, 41, 12, 42, 65, 0, 0, 0, 0, 0, 0, 0, 91, 43, 43
	                       DB  41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 42, 41, 89, 0, 0, 0, 0, 0, 0, 0, 91, 67, 43, 42, 41, 41, 42, 42, 42, 42, 42, 42
	                       DB  42, 42, 42, 42, 42, 41, 41, 41, 41, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 67, 14, 14, 43, 41, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 40, 41, 42
	                       DB  42, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 43, 43, 42, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 41, 42, 42, 65, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0, 0, 91, 43, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 65, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 14, 43, 43, 42, 41
	                       DB  41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 42, 42, 41, 41, 41, 41, 41, 41, 41, 42, 42
	                       DB  43, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 65, 42, 42, 41, 41, 41, 42, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                       DB  0
						 
	FIRE_X                 DW  445,464,163,103,48,510,372,95,166	,519,392,124,583,290,248,285,588,53,378,95,133,554,281,444,134,146,76,292,187,361
	FIRE_Y                 DW  301,96,118,113,295,161,306,137,257,119,290,167,291,241,102,321,144,87,197,163,92,85,292,162,207,269,130,218,203,300
	CURR_FIRE_INDEX        DW  0
	FIRES_NUM              DW  30

	; TEMPS FOR PROC OF DRAWING HEAD

	TEMPHEAD               DW  ?
	TEMP_HEAD_X            DW  100
	TEMP_HEAD_Y            DW  100                                                                                                                                                                                	;MSLN
	TEMP_HEAD_TRAN_X       DW  ?
	TEMP_HEAD_TRAN_Y       DW  ?


	; TEMPS FOR PROC OF DRAWING BODY

	TEMP_BODY_SHAPE        DW  ?
	INIT_SQUARE_X          DW  ?
	INIT_SQUARE_Y          DW  ?
	INIT_SQUARE_TRAN_X     DW  ?
	INIT_SQUARE_TRAN_Y     DW  ?
	TEMP_COLOR             DB  ?
	

	TEMP_BUFFER1           DB  ?
	TEMP_BUFFER2           DB  ?


	PLAYER1_SCORE          Dw  0
	PLAYER2_SCORE          Dw  0

	temp1_score            dw  0
	temp2_score            dw  0
	temp_to_addation       db  0
	temp_to_reset_score1   dw  0
	temp_to_reset_score2   dw  0





.CODE
MAIN PROC FAR
	                    MOV  AX,@DATA
	                    MOV  DS,AX
	                    CALL BEFORE_START_SETUP
	; ENTER GRAPHICS MODE
	                    MOV  AL,02H
	                    MOV  AH,4FH
	                    MOV  Bx,0100H
	                    INT  10H


	                    MOV  CX,640
	LLPP:               
	                    MOV  AH,0Ch
	                    MOV  AL,05
	                    MOV  BH,0
	                    MOV  DX,50
	                    INT  10h
	                    LOOP LLPP

	                    
			
	                
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                    CALL DRAW_INIT_SNAKE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                    call print_score_player1    	;;;;;print score of player 1
	                    call print_score_player2    	;;;print score of player 2

					  
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			
			
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                    CALL DRAW_STATUS_BAR

	                    CALL MOVE_SNAKE
	INFF:               
	                    JMP  INFF
	                    HLT
MAIN ENDP



print_score_player1 proc  near
	                    mov  ax,  PLAYER1_SCORE
	                    mov  temp_to_reset_score1,ax
	Next_digit:         mov  ax, PLAYER1_SCORE
	                    add  temp_to_addation ,1
	                    mov  bx,10
	                    mov  dx,0
	                    div  bx
	                    mov  PLAYER1_SCORE,ax
	                    mov  temp1_score,dx
	                    mov  dl,0fh                 	;column
					
	                    sub  dl,temp_to_addation

	                    mov  dh,1h                  	;row
	                    mov  bh,0
	                    mov  ah,02h
	                    int  10h
    
	;score of player 1
	                    mov  bl,4                   	;color
	                    mov  al,byte ptr temp1_score
	                    add  al,30h
	                    mov  ah,0eh                 	;
			
	                    int  10h
	                    mov  ax,PLAYER1_SCORE
	                    cmp  ax,0
	                    jg   Next_digit

	                    mov  ax,temp_to_reset_score1
	                    mov  PLAYER1_SCORE,ax
	                    mov  al,0
	                    mov  temp_to_addation ,al
		
	                    ret

print_score_player1 ENDP


print_score_player2 proc  near
	                    mov  ax,  PLAYER2_SCORE
	                    mov  temp_to_reset_score2,ax
	NEXT_DIGIT_2:       mov  ax, PLAYER2_SCORE
	                    add  temp_to_addation ,1
	                    mov  bx,10
	                    mov  dx,0
	                    div  bx
	                    mov  PLAYER2_SCORE,ax
	                    mov  temp2_score,dx
	                    mov  dl,4dh                 	;column
					
	                    sub  dl,temp_to_addation

	                    mov  dh,1h                  	;row
	                    mov  bh,0
	                    mov  ah,02h
	                    int  10h
    
	;score of player 2
	                    mov  bl,4                   	;color
	                    mov  al,byte ptr temp2_score
	                    add  al,30h
	                    mov  ah,0eh                 	;
			 
	                    int  10h
	                    mov  ax,PLAYER2_SCORE
	                    cmp  ax,0
	                    jg   NEXT_DIGIT_2

	                    mov  ax,temp_to_reset_score2
	                    mov  PLAYER2_SCORE,ax
	                    mov  al,0
	                    mov  temp_to_addation ,al
		
	                    ret

print_score_player2 ENDP



DRAW_STATUS_BAR PROC NEAR


	;;;;;;;;;;;;print name 1
	                    mov  si,offset name_s+4
	
	                    mov  dx,0102h
	loopname:           mov  ah,2
	                    int  10h

	                    mov  ah,09
	                    mov  bh,0
	                    mov  al,[si]
	                    mov  cx,1h
	                    mov  bl,059h

	                    int  10h

	;
	                    inc  dx
	                    inc  si
	                          
	                    mov  bx,si
	                    inc  si
	                    mov  al,[si]
	                    cmp  al,'$'
	                    mov  si,bx
	                    jnz  loopname

 


	;;;;;;;;;;;;;;;;;;

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Draw score



 




	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	;;;;;;;;;;;;print name 2
	                    mov  si,offset name_s2+4
	
	                    mov  dx,0140h
	loopname2:          mov  ah,2
	                    int  10h

	                    mov  ah,09
	                    mov  bh,0
	                    mov  al,[si]
	                    mov  cx,1h
	                    mov  bl,04ah

	                    int  10h

	                    inc  dx
	                    inc  si
	                          
	                    mov  bx,si
	                    inc  si
	                    mov  al,[si]
	                    cmp  al,'$'
	                    mov  si,bx
	                    jnz  loopname2


	                    RET

DRAW_STATUS_BAR ENDP

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;draw score;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BEFORE_START_SETUP PROC NEAR
	;clean screen
	                    mov  ax,0600h
	                    mov  cx,0
	                    mov  dx,184fh
	                    int  10h
	; text mode
	                    mov  ax,3
	                    int  10h


	                    mov  ah,2
	                    mov  dx,081fh
	                    int  10h
	                    mov  ah,09
	                    mov  dx ,offset ask_name
	                    int  21h
	;set curser
	                    mov  ah,2
	                    mov  dx,091fh
	                    int  10h
	;input his name
	                    mov  ah,0ah
	                    mov  dx,offset name_s+2
	                    int  21h
	;;;;second player
	                    mov  ah,2
	                    mov  dx,0a1fh
	                    int  10h
	                    mov  ah,09
	                    mov  dx ,offset ask_name2
	                    int  21h
	;set curser
	                    mov  ah,2
	                    mov  dx,0b1fh
	                    int  10h
	;input his name
	                    mov  ah,0ah
	                    mov  dx,offset name_s2+2
	                    int  21h
	;;;;;;;


	;set curser
	                    mov  ah,2
	                    mov  dx,0c1fh
	                    int  10h
	;out put of press any key to continue
	                    mov  ah,09
	                    mov  dx,offset pressenterkey
	                    int  21h
	;wait for press key
	label1:             mov  ah,0
	                    int  16h
	                    cmp  ah,28
	                    jnz  label1

	;to clean screen
	                    mov  ax,0600h
	                    mov  cx,0
	                    mov  dx,184fh
	                    int  10h
	;text mode
	                    mov  ax,3
	                    int  10h


	                    mov  ah,2
	                    mov  dx,0800h
	                    int  10h
	;input in page 2
	                    mov  ah,09
	                    mov  dx,offset message
	                    int  21h
	; to make zero flag not equal zero
	                    add  ah,2
	;wait for prees key
	return:             mov  ah,0
	                    int  16h

	                    cmp  ah,59
	                    jz   Chatting

	                    cmp  ah,1
	                    jz   exit

	                    cmp  ah,60
	                    jz   startGame
							  
 
	                    jnz  return



	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;for chatting not complete

	chatting:           
	;to clean screen
	                    mov  ax,0600h
	                    mov  cx,0
	                    mov  dx,184fh
	                    int  10h
	;text mode
	                    mov  ax,3
	                    int  10h


	                    mov  ah,2
	                    mov  dx,0000h
	                    int  10h
	                    mov  ah,09
	                    mov  dx,offset chat
	                    int  21h

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

exit:
.EXIT

	startGame:                 

	                           RET
BEFORE_START_SETUP ENDP



DRAW_HEAD proc  NEAR

	                           MOV  CX,TEMP_HEAD_X                         	;set the initial column (X)
	                           MOV  DX,TEMP_HEAD_Y                         	;set the initial line (Y)
	                           MOV  SI , TEMPHEAD
	                           SUB  CX,15                                  	; BASED ON THAT THE SIZE OF THE SQUARE IS 31
	                           SUB  DX,15
	                           MOV  TEMP_HEAD_TRAN_X,CX
	                           MOV  TEMP_HEAD_TRAN_Y,DX
	
	DRAW_HEAD_LABEL:           
	;set the configuration to writing a pixel
	                           MOV  AH,0Ch                                 	;set the configuration to writing a pixel
	                           MOV  AL,[SI]                                	;choose CORRECT color
	                           MOV  BH,00h                                 	;set the page number
	                           INT  10h                                    	;execute the configuration
			
	                           INC  SI                                     	; GET THE NEXT COLOR

	                           INC  CX                                     	;CX = CX + 1
	                           MOV  AX,CX                                  	;CX - BALL_X > BALL_SIZE (Y -> We go to the next line,N -> We continue to the next column
	                           SUB  AX,TEMP_HEAD_TRAN_X
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_HEAD_LABEL
			
	                           MOV  CX,TEMP_HEAD_TRAN_X                    	;the CX register goes back to the initial column
	                           INC  DX                                     	;we advance one line
			
	                           MOV  AX,DX                                  	;DX - BALL_Y > BALL_SIZE (Y -> we exit this procedure,N -> we continue to the next line
	                           SUB  AX,TEMP_HEAD_TRAN_Y
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_HEAD_LABEL
	                           RET
DRAW_HEAD ENDP

DRAW_BODY PROC NEAR

	                           MOV  CX,INIT_SQUARE_X                       	;set the initial column (X)
	                           MOV  DX,INIT_SQUARE_Y
	                           MOV  SI , TEMP_BODY_SHAPE                   	;set the initial line (Y)
	                           SUB  CX,15
	                           SUB  DX,15
	                           MOV  INIT_SQUARE_TRAN_X,CX
	                           MOV  INIT_SQUARE_TRAN_Y,DX
	
	DRAW_BODY_HORIZONTALL:     
	                           MOV  AH,0Ch                                 	;set the configuration to writing a pixel
	                           MOV  AL,[SI]
	                           MOV  AH,0Ch                                 	;choose CORRECT color
	                           MOV  BH,00h                                 	;set the page number
	                           INT  10h                                    	;execute the configuration
			
	                           INC  SI                                     	; GET THE NEXT COLOR

	                           INC  CX                                     	;CX = CX + 1
	                           MOV  AX,CX                                  	;CX - BALL_X > BALL_SIZE (Y -> We go to the next line,N -> We continue to the next column
	                           SUB  AX,INIT_SQUARE_TRAN_X
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_BODY_HORIZONTALL
			
	                           MOV  CX,INIT_SQUARE_TRAN_X                  	;the CX register goes back to the initial column
	                           INC  DX                                     	;we advance one line
			
	                           MOV  AX,DX                                  	;DX - BALL_Y > BALL_SIZE (Y -> we exit this procedure,N -> we continue to the next line
	                           SUB  AX,INIT_SQUARE_TRAN_Y
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_BODY_HORIZONTALL
							
	                           RET
DRAW_BODY ENDP

DRAW_APPLE PROC NEAR

	;;;;;;;;;;;;;;;;VALIDATION

	                           MOV  AX,APPLES_NUM
	                           MOV  BX,2
	                           MUL  BX
	                           SUB  AX,4                                   	; TRIVIAL NUMBER => STOP BEFORE END
	                           CMP  CURR_APPLE_INDEX,AX
	                           JB   NOT_END_OF_APPLES_ARR
	                           MOV  CURR_APPLE_INDEX,0
	NOT_END_OF_APPLES_ARR:     
	                           MOV  SI,OFFSET APPLE_X
	                           MOV  BX, CURR_APPLE_INDEX
	                           MOV  DX, [SI+BX]
	                           MOV  TEMP_HEAD_X ,DX

	                           MOV  SI,OFFSET APPLE_Y
	                           MOV  BX, CURR_APPLE_INDEX
	                           MOV  DX, [SI+BX]
	                           MOV  TEMP_HEAD_Y ,DX
			 
	                           MOV  TEMPHEAD, OFFSET APPLE
	                           CALL DRAW_HEAD

	                           RET
DRAW_APPLE ENDP



DRAW_FIRE PROC NEAR

	;;;;;;;;;;;;;;;;VALIDATION

	                           MOV  AX,FIRES_NUM
	                           MOV  BX,2
	                           MUL  BX
	                           SUB  AX,4                                   	; TRIVIAL NUMBER => STOP BEFORE END
	                           CMP  CURR_FIRE_INDEX,AX
	                           JB   NOT_END_OF_FIRES_ARR
	                           MOV  CURR_FIRE_INDEX,0
	NOT_END_OF_FIRES_ARR:      
	                           MOV  SI,OFFSET FIRE_X
	                           MOV  BX, CURR_FIRE_INDEX
	                           MOV  DX, [SI+BX]
	                           MOV  TEMP_HEAD_X ,DX

	                           MOV  SI,OFFSET FIRE_Y
	                           MOV  BX, CURR_FIRE_INDEX
	                           MOV  DX, [SI+BX]
	                           MOV  TEMP_HEAD_Y ,DX
			 
	                           MOV  TEMPHEAD, OFFSET FIRE
	                           CALL DRAW_HEAD

	                           RET
DRAW_FIRE ENDP


DRAW_SQUARE PROC NEAR                                                  		; GIVE IT INITIAL_SQUARE_X, AND INITIAL_SQUARE_Y AND TEMP_COLOR

	                           MOV  CX,INIT_SQUARE_X                       	;set the initial column (X)
	                           MOV  DX,INIT_SQUARE_Y
	                                   
	                           SUB  CX,15
	                           SUB  DX,15
	                           MOV  INIT_SQUARE_TRAN_X,CX
	                           MOV  INIT_SQUARE_TRAN_Y,DX
	
	DRAW_SQUARE_HORIZONTALL:   
	;set the configuration to writing a pixel
	                           MOV  AL,TEMP_COLOR
	                           MOV  AH,0Ch                                 	;choose CORRECT color
	                           MOV  BH,00h                                 	;set the page number
	                           INT  10h                                    	;execute the configuration
			
	; GET THE NEXT COLOR
	                           INC  CX                                     	;CX = CX + 1
	                           MOV  AX,CX                                  	;CX - BALL_X > BALL_SIZE (Y -> We go to the next line,N -> We continue to the next column
	                           SUB  AX,INIT_SQUARE_TRAN_X
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_SQUARE_HORIZONTALL
			
	                           MOV  CX,INIT_SQUARE_TRAN_X                  	;the CX register goes back to the initial column
	                           INC  DX                                     	;we advance one line
			
	                           MOV  AX,DX                                  	;DX - BALL_Y > BALL_SIZE (Y -> we exit this procedure,N -> we continue to the next line
	                           SUB  AX,INIT_SQUARE_TRAN_Y
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DRAW_SQUARE_HORIZONTALL
							
	                           RET
DRAW_SQUARE ENDP

 
DRAW_INIT_SNAKE PROC NEAR
 
	                           MOV  TEMPHEAD, OFFSET SNAKE1_HEADSHAPE_UP
	                           MOV  DX,SNAKE1_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE1_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX                        	; DRAW HEAD OF SNAKE
	                           CALL DRAW_HEAD
							
	; DRAW THE BODY
	                           MOV  DX,OFFSET BODY_SHAPE1
	                           MOV  TEMP_BODY_SHAPE,DX                     	; SET THE COLOR OF THE FIRST SNAKE
							
	                           MOV  DX,SNAKE1_X[0]
	                           MOV  SNAKE1_X[2],DX                         	; 2*(N-1) = 2(2-1) = 2    N-> SECOND POSITION =2
	                           MOV  INIT_SQUARE_X,DX

	                           MOV  DX,SNAKE1_Y[0]
	                           ADD  DX,31
	                           MOV  SNAKE1_Y[2],DX
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
								
	                          

	; SECOND SNAKE WILL BE ADDED
	                           MOV  TEMPHEAD, OFFSET SNAKE2_HEADSHAPE_UP
	                           MOV  DX,SNAKE2_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE2_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX                        	; DRAW HEAD OF SNAKE
	                           CALL DRAW_HEAD
							
	; DRAW THE BODY
	                           MOV  DX,OFFSET BODY_SHAPE2
	                           MOV  TEMP_BODY_SHAPE,DX                     	; SET THE COLOR OF THE FIRST SNAKE
							
	                           MOV  DX,SNAKE2_X[0]
	                           MOV  SNAKE2_X[2],DX                         	; 2*(N-1) = 2(2-1) = 2    N-> SECOND POSITION =2
	                           MOV  INIT_SQUARE_X,DX

	                           MOV  DX,SNAKE2_Y[0]
	                           ADD  DX,31
	                           MOV  SNAKE2_Y[2],DX
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY




	                           RET
DRAW_INIT_SNAKE ENDP

DELETE_END PROC NEAR

	                           MOV  DI,CHOSEN_SNAKE
	                           CMP  DI , 1
	                           JZ   SNAKE1
	                           JMP  SNAKE2
	FUNC:                      
	                           MOV  CX,INIT_SQUARE_X                       	;set the initial column (X)
	                           MOV  DX,INIT_SQUARE_Y
	                                              	
	                           SUB  CX,15
	                           SUB  DX,15
	                           MOV  INIT_SQUARE_TRAN_X,CX
	                           MOV  INIT_SQUARE_TRAN_Y,DX
	
	DELETE_SQUARE_HORIZONTALL: 
	                           MOV  AH,0Ch                                 	;set the configuration to writing a pixel
	                           MOV  AL,00H                                 	;BLACK_PIXEL                            	;choose CORRECT color
	                           MOV  BH,00h                                 	;set the page number
	                           INT  10h                                    	;execute the configuration
			                                	

	                           INC  CX                                     	;CX = CX + 1
	                           MOV  AX,CX                                  	;CX - BALL_X > BALL_SIZE (Y -> We go to the next line,N -> We continue to the next column
	                           SUB  AX,INIT_SQUARE_TRAN_X
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DELETE_SQUARE_HORIZONTALL
			
	                           MOV  CX,INIT_SQUARE_TRAN_X                  	;the CX register goes back to the initial column
	                           INC  DX                                     	;we advance one line
			
	                           MOV  AX,DX                                  	;DX - BALL_Y > BALL_SIZE (Y -> we exit this procedure,N -> we continue to the next line
	                           SUB  AX,INIT_SQUARE_TRAN_Y
	                           CMP  AX,SQUARE_SIZE
	                           JNE  DELETE_SQUARE_HORIZONTALL
	                           RET
							
	SNAKE1:                    
	                           SUB  DI , 1
	                           MOV  AX , DI
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  DI,AX
	                           MOV  BX,SNAKE_LEN_ARR[DI]                   	;;;;;;;2(1-1)
	                           SUB  BX,1
	                           MOV  AX , BX
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  BX , AX
	                           MOV  DX,SNAKE1_X[BX]
	                           MOV  INIT_SQUARE_X ,DX

	                           MOV  DX,SNAKE1_Y[BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           JMP  FUNC

	SNAKE2:                    
	                           SUB  DI , 1
	                           MOV  AX , DI
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  DI,AX
	                           MOV  BX,SNAKE_LEN_ARR[DI]
	                           SUB  BX,1
	                           MOV  AX , BX
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  BX , AX
	                           MOV  DX,SNAKE2_X[BX]
	                           MOV  INIT_SQUARE_X ,DX

	                           MOV  DX,SNAKE2_Y[BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           JMP  FUNC

DELETE_END ENDP

SHIFT_SNAKE PROC NEAR
	                           MOV  SI,CHOSEN_SNAKE
	                           SUB  SI , 1
	                           MOV  AX , SI
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  SI,AX
	                          
	                           CMP  CHOSEN_SNAKE,1
	                           JZ   SHIFT_SNAKE_ONE
							
	                           MOV  CX,SNAKE_LEN_ARR[SI]
	                           MOV  BX,CX
	                           MOV  DI,OFFSET SNAKE2_X
	                           MOV  SI,OFFSET SNAKE2_Y
	                           JMP  L1
	SHIFT_SNAKE_ONE:           
	                           MOV  CX,SNAKE_LEN_ARR[SI]
	                           MOV  BX,CX

	                           MOV  DI,OFFSET SNAKE1_X
	                           MOV  SI,OFFSET SNAKE1_Y
	L1:                        
	                           PUSH BX
	                           SUB  BX , 1
	                           MOV  AX , BX
	                           MOV  BX , 2
	                           MUL  BX
	                           MOV  BX , AX
	                           MOV  DX,[DI+BX]
	                           MOV  [DI+BX+2],DX
	                           MOV  DX,[SI+BX]
	                           MOV  [SI+BX+2],DX
	                           POP  BX
	                           DEC  BX
	                           LOOP L1
	                           RET
SHIFT_SNAKE ENDP

MOVE_SNAKE1_UP PROC NEAR
	                           CMP  SNAKE1_Y[0] ,98
	                           JBE  EXITUP1
	                           MOV  CHOSEN_SNAKE , 1
	                           CALL DELETE_END
	                         
							  
	                           MOV  TEMPHEAD, OFFSET SNAKE1_HEADSHAPE_UP
	                           MOV  DX,SNAKE1_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE1_Y[0]
	                         
	                           SUB  DX,31
 
						

	                       
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE1_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE1_Y[0],DX
	                           CALL DRAW_HEAD
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE1
	                           MOV  DX,SNAKE1_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE1_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY


	EXITUP1:                   
	                           RET
							
	

	                          
MOVE_SNAKE1_UP ENDP


MOVE_SNAKE1_DOWN PROC NEAR
	                           CMP  SNAKE1_Y[0] ,352
	                           JAE  EXIT_DOWN1
	                           MOV  CHOSEN_SNAKE , 1
	                           CALL DELETE_END
	                           MOV  TEMPHEAD, OFFSET SNAKE1_HEADSHAPE_DOWN
	                           MOV  DX,SNAKE1_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE1_Y[0]
	                           ADD  DX,31
	                          
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE1_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE1_Y[0],DX
	                           CALL DRAW_HEAD
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE1
	                           MOV  DX,SNAKE1_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE1_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_DOWN1:                
	                           RET

	               
	                         
	                         
MOVE_SNAKE1_DOWN ENDP


MOVE_SNAKE1_RIGHT PROC NEAR
	                           CMP  SNAKE1_X[0] , 592
	                           JAE  EXIT_RIGHT1
	                           MOV  CHOSEN_SNAKE , 1
	                           CALL DELETE_END
							
	                           MOV  TEMPHEAD, OFFSET SNAKE1_HEADSHAPE_RIGHT
	                           MOV  DX,SNAKE1_X[0]
	                           ADD  DX,31
	                          
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE1_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE1_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE1_Y[0],DX
							
	                           CALL DRAW_HEAD
							
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE1
	                           MOV  DX,SNAKE1_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE1_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_RIGHT1:               
	                           RET

MOVE_SNAKE1_RIGHT ENDP


MOVE_SNAKE1_LEFT PROC NEAR
	                           CMP  SNAKE1_X[0],48
	                           JBE  EXIT_LEFT1
	                           MOV  CHOSEN_SNAKE , 1
	                           CALL DELETE_END
						
	                           MOV  TEMPHEAD, OFFSET SNAKE1_HEADSHAPE_LEFT
	                           MOV  DX,SNAKE1_X[0]
	                           SUB  DX,31
	       
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE1_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE1_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE1_Y[0],DX
							
	                           CALL DRAW_HEAD
							
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE1
	                           MOV  DX,SNAKE1_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE1_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_LEFT1:                
	                           RET
	

MOVE_SNAKE1_LEFT ENDP


MOVE_SNAKE2_UP PROC NEAR
	                           MOV  CHOSEN_SNAKE , 2
	                           CMP  SNAKE2_Y[0] ,98
	                           JBE  EXITUP2
	                          
	                           CALL DELETE_END
	                     
							  
	                           MOV  TEMPHEAD, OFFSET SNAKE2_HEADSHAPE_UP
	                           MOV  DX,SNAKE2_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE2_Y[0]
	                         
	                           SUB  DX,31
 
						

	                       
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE2_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE2_Y[0],DX
	                           CALL DRAW_HEAD
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE2
	                           MOV  DX,SNAKE2_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE2_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY

	EXITUP2:                   
	                           RET
							
                          
MOVE_SNAKE2_UP ENDP


MOVE_SNAKE2_DOWN PROC NEAR
	                           MOV  CHOSEN_SNAKE , 2
	                           CMP  SNAKE2_Y[0] ,352
	                           JAE  EXIT_DOWN2
	                         
	                           CALL DELETE_END
	                           MOV  TEMPHEAD, OFFSET SNAKE2_HEADSHAPE_DOWN
	                           MOV  DX,SNAKE2_X[0]
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE2_Y[0]
	                           ADD  DX,31
	                          
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE2_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE2_Y[0],DX
	                           CALL DRAW_HEAD
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE2
	                           MOV  DX,SNAKE2_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE2_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_DOWN2:                
	                           RET
                                           
MOVE_SNAKE2_DOWN ENDP



MOVE_SNAKE2_RIGHT PROC NEAR
	                           MOV  CHOSEN_SNAKE , 2
	                           CMP  SNAKE2_X[0] , 592
	                           JAE  EXIT_RIGHT2
	                          
	                           CALL DELETE_END
							
	                           MOV  TEMPHEAD, OFFSET SNAKE2_HEADSHAPE_RIGHT
	                           MOV  DX,SNAKE2_X[0]
	                           ADD  DX,31
	                          
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE2_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE2_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE2_Y[0],DX
							
	                           CALL DRAW_HEAD
							
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE2
	                           MOV  DX,SNAKE2_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE2_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_RIGHT2:               
	                           RET

MOVE_SNAKE2_RIGHT ENDP


MOVE_SNAKE2_LEFT PROC NEAR
	                           MOV  CHOSEN_SNAKE , 2
	                           CMP  SNAKE2_X[0],48
	                           JBE  EXIT_LEFT2
	                         
	                           CALL DELETE_END
							
	                           MOV  TEMPHEAD, OFFSET SNAKE2_HEADSHAPE_LEFT
	                           MOV  DX,SNAKE2_X[0]
	                           SUB  DX,31
	       
	                           MOV  TEMP_HEAD_X ,DX
	                           MOV  DX,SNAKE2_Y[0]
	                           MOV  TEMP_HEAD_Y ,DX
	                           CALL SHIFT_SNAKE
	                           MOV  DX,TEMP_HEAD_X
	                           MOV  SNAKE2_X[0],DX
	                           MOV  DX,TEMP_HEAD_Y
	                           MOV  SNAKE2_Y[0],DX
							
	                           CALL DRAW_HEAD
							
	                           MOV  TEMP_BODY_SHAPE,OFFSET BODY_SHAPE2
	                           MOV  DX,SNAKE2_X[2]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX, SNAKE2_Y[2]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_BODY
	EXIT_LEFT2:                
	                           RET
	

MOVE_SNAKE2_LEFT ENDP

INCREASE_LEN PROC NEAR                                                 		; TAKES CHOSEN_SNAKE,
	                           CMP  CHOSEN_SNAKE,1
	                           JZ   CHOSEN_SNAKE_IS_1
	                           MOV  SI,OFFSET SNAKE2_X
	                           MOV  DI,OFFSET SNAKE2_Y
	                           MOV  DX,MAX_TOTAL_LEN
	                           CMP  SNAKE_LEN_ARR[2],DX
	                           JE   MAX_LENN
	                           ADD  SNAKE_LEN_ARR[2],1
	                           ADD  PLAYER2_SCORE,5
	MAX_LENN:                  
	                           JMP  END_OF_CHOOSING_THE_SNAKE
	CHOSEN_SNAKE_IS_1:         
	                           MOV  SI,OFFSET SNAKE1_X
	                           MOV  DI,OFFSET SNAKE1_Y
	                           MOV  DX,MAX_TOTAL_LEN
	                           CMP  SNAKE_LEN_ARR[0],DX
	                           JE   MAX_LEN2
	                           ADD  SNAKE_LEN_ARR[0],1
	                           ADD  PLAYER1_SCORE ,5
	MAX_LEN2:                  
	END_OF_CHOOSING_THE_SNAKE: 
							
	                           RET
INCREASE_LEN ENDP


DECREASE_LEN PROC NEAR
	                           CMP  CHOSEN_SNAKE,1
	                           JZ   CHOSEN_SNAKEE_IS_1

	                           MOV  DX,MIN_TOTAL_LEN
	                           CMP  SNAKE_LEN_ARR[2],DX
	                           JBE  MIN_LEN_L
							  
	                           CALL DELETE_END
	                           SUB  SNAKE_LEN_ARR[2],1
	                           SUB  PLAYER2_SCORE,5
	MIN_LEN_L:                 
	                           JMP  END_OF_CHOOSING_THE_SNAKES
	CHOSEN_SNAKEE_IS_1:        
	                         
	                           MOV  DX,MIN_TOTAL_LEN
	                           CMP  SNAKE_LEN_ARR[0],DX
	                           JBE  MIN_LEN2
	                           CALL DELETE_END
	                           SUB  SNAKE_LEN_ARR[0],1
	                           SUB  PLAYER1_SCORE,5
	MIN_LEN2:                  
	END_OF_CHOOSING_THE_SNAKES:
							
	                           RET
DECREASE_LEN ENDP
	;//////////////////////////////////////////////////////////////////////
CHECK_FIRE PROC NEAR
	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  AX, [FIRE_X+BX]                        	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE1_X[0]                         	;   BX will INITIALLY contain the x-cordiante of the head of snake 1

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_X_CHECKING_F                	; GE==GREATER EQUAL
	                           XCHG AX,BX                                  	; IF BX IS LARGER THAN AX SO XCHG THEM
	A_GE_B_FOR_X_CHECKING_F:   
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JG   END_OF_SNAKE1_FALSE_F                  	; CONDITION IS FALSE , RET

	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  AX, [FIRE_Y+BX]                        	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE1_Y[0]

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_Y_CHECKING_F
	                           XCHG AX,BX

	A_GE_B_FOR_Y_CHECKING_F:   
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JBE  END_OF_SNAKE1_TRUE_F                   	; CONDITION IS TRUE

	                           JMP  END_OF_SNAKE1_FALSE_F

	END_OF_SNAKE1_TRUE_F:                                                  	; CONDITION IS TRUE
	                           MOV  TEMP_COLOR,00h                         	; PREPARING FOR DELETING THE APPLE
	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  DX,[FIRE_X+BX]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX,[FIRE_Y+BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_SQUARE
	                           ADD  CURR_FIRE_INDEX,2
	                           MOV  CHOSEN_SNAKE,1
	                           CALL DECREASE_LEN

	                           JMP  ENDD_F


	END_OF_SNAKE1_FALSE_F:     
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;THE 2ND SNAKE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  AX, [FIRE_X+BX]                        	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE2_X[0]                         	;   BX will INITIALLY contain the x-cordiante of the head of snake 1

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_X_CHECKING2_F               	; GE==GREATER EQUAL
	                           XCHG AX,BX                                  	; IF BX IS LARGER THAN AX SO XCHG THEM
	A_GE_B_FOR_X_CHECKING2_F:  
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JG   ENDD_F                                 	; CONDITION IS FALSE , RET

	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  AX, [FIRE_Y+BX]                        	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE2_Y[0]

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_Y_CHECKING2_F
	                           XCHG AX,BX

	A_GE_B_FOR_Y_CHECKING2_F:  
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JBE  END_OF_SNAKE2_TRUE2_F                  	; CONDITION IS TRUE

	                           JMP  ENDD_F

	END_OF_SNAKE2_TRUE2_F:                                                 	; CONDITION IS TRUE
	                           MOV  TEMP_COLOR,00h                         	; PREPARING FOR DELETING THE APPLE
	                           MOV  BX,CURR_FIRE_INDEX
	                           MOV  DX,[FIRE_X+BX]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX,[FIRE_Y+BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_SQUARE
	                           ADD  CURR_FIRE_INDEX,2
	                           MOV  CHOSEN_SNAKE,2
	                           CALL DECREASE_LEN

	                           JMP  ENDD_F
							  
							
	ENDD_F:                    
	                           RET
CHECK_FIRE ENDP

CHECK_FOOD PROC NEAR
	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  AX, [APPLE_X+BX]                       	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE1_X[0]                         	;   BX will INITIALLY contain the x-cordiante of the head of snake 1

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_X_CHECKING                  	; GE==GREATER EQUAL
	                           XCHG AX,BX                                  	; IF BX IS LARGER THAN AX SO XCHG THEM
	A_GE_B_FOR_X_CHECKING:     
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JG   END_OF_SNAKE1_FALSE                    	; CONDITION IS FALSE , RET

	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  AX, [APPLE_Y+BX]                       	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE1_Y[0]

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_Y_CHECKING
	                           XCHG AX,BX

	A_GE_B_FOR_Y_CHECKING:     
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JBE  END_OF_SNAKE1_TRUE                     	; CONDITION IS TRUE

	                           JMP  END_OF_SNAKE1_FALSE

	END_OF_SNAKE1_TRUE:                                                    	; CONDITION IS TRUE
	                           MOV  TEMP_COLOR,00h                         	; PREPARING FOR DELETING THE APPLE
	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  DX,[APPLE_X+BX]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX,[APPLE_Y+BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_SQUARE
	                           ADD  CURR_APPLE_INDEX,2
	                           MOV  CHOSEN_SNAKE,1
	                           CALL INCREASE_LEN

	                           JMP  ENDD


	END_OF_SNAKE1_FALSE:       
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;THE 2ND SNAKE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  AX, [APPLE_X+BX]                       	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE2_X[0]                         	;   BX will INITIALLY contain the x-cordiante of the head of snake 1

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_X_CHECKING2                 	; GE==GREATER EQUAL
	                           XCHG AX,BX                                  	; IF BX IS LARGER THAN AX SO XCHG THEM
	A_GE_B_FOR_X_CHECKING2:    
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JG   ENDD                                   	; CONDITION IS FALSE , RET

	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  AX, [APPLE_Y+BX]                       	;   AX will INITIALLY contain the x-cordiante of the apple
	                           MOV  BX,SNAKE2_Y[0]

	                           CMP  BX,AX
	                           JNG  A_GE_B_FOR_Y_CHECKING2
	                           XCHG AX,BX

	A_GE_B_FOR_Y_CHECKING2:    
	                           MOV  DX,CRITICAL_DIST
	                           SUB  AX,BX                                  	; AX WILL CONTAIN THE REAL DISTANCE
	                           CMP  AX,DX                                  	; COMPARE THE DISTANCE BETWEEN SNAKE1_HEAD_CENTER AND APPLE_X BY CRITICAL DISTANCE
	                           JBE  END_OF_SNAKE2_TRUE2                    	; CONDITION IS TRUE

	                           JMP  ENDD

	END_OF_SNAKE2_TRUE2:                                                   	; CONDITION IS TRUE
	                           MOV  TEMP_COLOR,00h                         	; PREPARING FOR DELETING THE APPLE
	                           MOV  BX,CURR_APPLE_INDEX
	                           MOV  DX,[APPLE_X+BX]
	                           MOV  INIT_SQUARE_X,DX
	                           MOV  DX,[APPLE_Y+BX]
	                           MOV  INIT_SQUARE_Y,DX
	                           CALL DRAW_SQUARE
	                           ADD  CURR_APPLE_INDEX,2
	                           MOV  CHOSEN_SNAKE,2
	                           CALL INCREASE_LEN

	                           JMP  ENDD
							  
							
	ENDD:                      
	                           RET
CHECK_FOOD ENDP


MOVE_SNAKE PROC NEAR
                    
	START:                     
	                         	    			           
	                           mov  ah,0
	                           int  16h
							 
						
	                           CMP  AH ,72
	                           JZ   SNAKE_1
	                           CMP  AH ,80
	                           JZ   SNAKE_1
	                           CMP  AH,77
	                           JZ   SNAKE_1
	                           CMP  AH,75
	                           JZ   SNAKE_1
	                   
							
	         
	                           CMP  AH ,11H
	                           JZ   SNAKE_1
	                           CMP  AH ,1FH
	                           JZ   SNAKE_1
	                           CMP  AH,20H
	                           JZ   SNAKE_1
	                           CMP  AH,1EH
	                           JZ   SNAKE_1

	                           JMP  START

	NEW_START:                 
	                           CALL DRAW_APPLE
	                           CALL CHECK_FOOD
	                           CALL DRAW_FIRE
	                           CALL CHECK_FIRE


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;DELAY MACRO ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                           MOV  CX,0001H
	                           MOV  DX,0FFFH
	                           MOV  AH,86H
	                           INT  15H
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



	                           MOV  AH,1
	                           INT  16h
	                           JZ   GO_AS_BEFORE

	                           MOV  AH,0
	                           INT  16H


	SNAKE_1:                   
	                           CMP  AH ,72
	                           JZ   UP1
	                           CMP  AH ,80
	                           JZ   DOWN1
	                           CMP  AH,77
	                           JZ   RIGHT1
	                           CMP  AH,75
	                           JZ   LEFT1_HELP
	                   
							
	SNAKE_2:                   
	                           CMP  AH ,11H
	                           JZ   UPDATE_TEMP_BUFFER2
	                           CMP  AH ,1FH
	                           JZ   UPDATE_TEMP_BUFFER2
	                           CMP  AH,20H
	                           JZ   UPDATE_TEMP_BUFFER2
	                           CMP  AH,1EH
	                           JZ   UPDATE_TEMP_BUFFER2


	                           JMP  GO_AS_BEFORE


	UPDATE_TEMP_BUFFER2:       
	                           MOV  TEMP_BUFFER2,AH
	                           MOV  AH,TEMP_BUFFER1
	                           JMP  SNAKE_1


	GO_AS_BEFORE:              

			
	                           CMP  TEMP_BUFFER1 ,72
	                           JZ   UP1
	                           CMP  TEMP_BUFFER1 ,80
	                           JZ   DOWN1
	                           CMP  TEMP_BUFFER1,77
	                           JZ   RIGHT1
	                           CMP  TEMP_BUFFER1,75
	                           JZ   LEFT1
	                   
	SNAKE2_LABEL:              
	                           CMP  TEMP_BUFFER2 ,11H
	                           JZ   UP2
	                           CMP  TEMP_BUFFER2 ,1FH
	                           JZ   DOWN2
	                           CMP  TEMP_BUFFER2,20H
	                           JZ   RIGHT2
	                           CMP  TEMP_BUFFER2,1EH
	                           JZ   LEFT2


	                           JMP  NEW_START                              	;

	LEFT1_HELP:                
	                           JMP  LEFT1

	UP1:                       
	      
	                           CALL MOVE_SNAKE1_UP
	                           MOV  TEMP_BUFFER1 ,72
	                           JMP  SNAKE2_LABEL

	                           JMP  NEW_START

	DOWN1:                     
	                           CALL MOVE_SNAKE1_DOWN
	                           MOV  TEMP_BUFFER1 ,80
	                           JMP  SNAKE2_LABEL

	                           JMP  NEW_START

	RIGHT1:                    
	                           CALL MOVE_SNAKE1_RIGHT
	                           MOV  TEMP_BUFFER1,77
	                           JMP  SNAKE2_LABEL

	                           JMP  NEW_START

	LEFT1:                     
	                           CALL MOVE_SNAKE1_LEFT
	                           MOV  TEMP_BUFFER1,75
	                           JMP  SNAKE2_LABEL

	                           JMP  NEW_START


	UP2:                       
	                           CALL MOVE_SNAKE2_UP
	                  
	                           JMP  NEW_START

	DOWN2:                     
	                           CALL MOVE_SNAKE2_DOWN
	                 
	                           JMP  NEW_START

	RIGHT2:                    
	                           CALL MOVE_SNAKE2_RIGHT
	                      
	                           JMP  NEW_START

	LEFT2:                     
	                           CALL MOVE_SNAKE2_LEFT
	                    
	                           JMP  NEW_START
							


	                           RET
MOVE_SNAKE ENDP
END MAIN